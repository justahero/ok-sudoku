use std::{convert::TryFrom, time::Duration};

use criterion::{Criterion, criterion_group, criterion_main};
use sudoku::{Solver, StrategySolver, Sudoku};

criterion_group!(
    benches,
    solve_sudokus_using_backtracing,
    solve_sudokus_using_strategy_solver,
);
criterion_main!(benches);

/// This benchmark solves a fixed list of sudokus
fn solve_sudokus_using_backtracing(criterion: &mut Criterion) {
    let mut group = criterion.benchmark_group("backtracking");
    group.warm_up_time(Duration::from_millis(100));
    group.measurement_time(Duration::from_secs(10));
    group.sample_size(10);
    group.bench_function("solve", |bencher| {
        let sudokus = [
            // r"4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......",
            r"52...6.........7.13...........4..8..6......5...........418.........3..2...87.....",
            r"6.....8.3.4.7.................5.4.7.3..2.....1.6.......2.....5.....8.6......1....",
            // r"48.3............71.2.......7.5....6....2..8.............1.76...3.....4......5....",
            // r"....14....3....2...7..........9...3.6.1.............8.2.....1.4....5.6.....7.8...",
            // r"......52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.",
            // r"6.2.5.........3.4..........43...8....1....2........7..5..27...........81...6.....",
            // r".524.........7.1..............8.2...3.....6...9.5.....1.6.3...........897........",
            // r"6.2.5.........4.3..........43...8....1....2........7..5..27...........81...6.....",
            // r".923.........8.1...........1.7.4...........658.........6.5.2...4.....7.....9.....",
            // r"6..3.2....5.....1..........7.26............543.........8.15........4.2........7..",
            // r".6.5.1.9.1...9..539....7....4.8...7.......5.8.817.5.3.....5.2............76..8...",
            // r"..5...987.4..5...1..7......2...48....9.1.....6..2.....3..6..2.......9.7.......5..",
            // r"3.6.7...........518.........1.4.5...7.....6.....2......2.....4.....8.3.....5.....",
            // r"1.....3.8.7.4..............2.3.1...........958.........5.6...7.....8.2...4.......",
            // r"6..3.2....4.....1..........7.26............543.........8.15........4.2........7..",
            // r"....3..9....2....1.5.9..............1.2.8.4.6.8.5...2..75......4.1..6..3.....4.6.",
            // r"45.....3....8.1....9...........5..9.2..7.....8.........1..4..........7.2...6..8..",
            // r".237....68...6.59.9.....7......4.97.3.7.96..2.........5..47.........2....8.......",
            // r"..84...3....3.....9....157479...8........7..514.....2...9.6...2.5....4......9..56",
        ];

        bencher.iter(|| {
            for sudoku in sudokus.iter() {
                let sudoku = Sudoku::try_from(*sudoku).unwrap();
                Solver::find_unique(&sudoku).ok();
            }
        });
    });
}

/// This benchmark uses the StrategySolver to solve a list of solvable Sudokus
fn solve_sudokus_using_strategy_solver(criterion: &mut Criterion) {
    let mut group = criterion.benchmark_group("strategy_solver");
    group.warm_up_time(Duration::from_millis(100));
    group.measurement_time(Duration::from_secs(10));
    group.sample_size(10);
    group.bench_function("solve", |bencher| {
        let sudokus = [
            r"003020600900305001001806400008102900700000008006708200002609500800203009005010300",
            r"200080300060070084030500209000105408000000000402706000301007040720040060004010003",
            r"000000907000420180000705026100904000050000040000507009920108000034059000507000000",
            r"030050040008010500460000012070502080000603000040109030250000098001020600080060020",
            r"020810740700003100090002805009040087400208003160030200302700060005600008076051090",
            r"100920000524010000000000070050008102000000000402700090060000000000030945000071006",
            r"043080250600000000000001094900004070000608000010200003820500000000000005034090710",
            r"480006902002008001900370060840010200003704100001060049020085007700900600609200018",
            r"000900002050123400030000160908000000070000090000000205091000050007439020400007000",
            r"001900003900700160030005007050000009004302600200000070600100030042007006500006800",
            r"000125400008400000420800000030000095060902010510000060000003049000007200001298000",
            r"062340750100005600570000040000094800400000006005830000030000091006400007059083260",
            r"300000000005009000200504000020000700160000058704310600000890100000067080000005437",
            r"630000000000500008005674000000020000003401020000000345000007004080300902947100080",
            r"000020040008035000000070602031046970200000000000501203049000730000000010800004000",
            r"361025900080960010400000057008000471000603000259000800740000005020018060005470329",
            r"050807020600010090702540006070020301504000908103080070900076205060090003080103040",
            r"080005000000003457000070809060400903007010500408007020901020000842300000000100080",
            r"003502900000040000106000305900251008070408030800763001308000104000020000005104800",
            r"000000000009805100051907420290401065000000000140508093026709580005103600000000000",
            r"020030090000907000900208005004806500607000208003102900800605007000309000030020050",
            r"005000006070009020000500107804150000000803000000092805907006000030400010200000600",
            r"040000050001943600009000300600050002103000506800020007005000200002436700030000040",
            r"004000000000030002390700080400009001209801307600200008010008053900040000000000800",
            r"360020089000361000000000000803000602400603007607000108000000000000418000970030014",
            r"500400060009000800640020000000001008208000501700500000000090084003000600060003002",
            r"007256400400000005010030060000508000008060200000107000030070090200000004006312700",
            r"000000000079050180800000007007306800450708096003502700700000005016030420000000000",
            r"030000080009000500007509200700105008020090030900402001004207100002000800070000090",
            r"200170603050000100000006079000040700000801000009050000310400000005000060906037002",
            r"000000080800701040040020030374000900000030000005000321010060050050802006080000000",
            r"000000085000210009960080100500800016000000000890006007009070052300054000480000000",
            r"608070502050608070002000300500090006040302050800050003005000200010704090409060701",
            r"050010040107000602000905000208030501040070020901080406000401000304000709020060010",
            r"053000790009753400100000002090080010000907000080030070500000003007641200061000940",
            r"006080300049070250000405000600317004007000800100826009000702000075040190003090600",
            r"005080700700204005320000084060105040008000500070803010450000091600508007003010600",
            r"000900800128006400070800060800430007500000009600079008090004010003600284001007000",
            r"000080000270000054095000810009806400020403060006905100017000620460000038000090000",
            r"000602000400050001085010620038206710000000000019407350026040530900020007000809000",
            r"000900002050123400030000160908000000070000090000000205091000050007439020400007000",
            r"380000000000400785009020300060090000800302009000040070001070500495006000000000092",
            r"000158000002060800030000040027030510000000000046080790050000080004070100000325000",
            r"010500200900001000002008030500030007008000500600080004040100700000700006003004050",
            r"080000040000469000400000007005904600070608030008502100900000005000781000060000010",
            r"904200007010000000000706500000800090020904060040002000001607000000000030300005702",
            r"000700800006000031040002000024070000010030080000060290000800070860000500002006000",
            r"001007090590080001030000080000005800050060020004100000080000030100020079020700400",
            r"000003017015009008060000000100007000009000200000500004000000020500600340340200000",
            r"300200000000107000706030500070009080900020004010800050009040301000702000000008006",
        ];

        let solver = StrategySolver::new();

        bencher.iter(|| {
            for sudoku in sudokus.iter() {
                let sudoku = Sudoku::try_from(*sudoku).unwrap();
                solver.solve(&sudoku, false).ok();
            }
        });
    });
}
